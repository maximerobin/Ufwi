############################################
# X509 TLS configuration
# File generated by EdenWall: {{ _generation_time_ }}
############################################

# WARNING: nuauth need to be restarted if value is changed
# in this section

# complete name of server private key
# default to CONFIGDIR/nuauth.pem
# Warning: nuauth need to be restarted if value is changed
nuauth_tls_key="/etc/nufw/certs/nuauth-key.pem"

# password for private key (if needed)
# NOTE : currently unsupported
# Warning: nuauth need to be restarted if value is changed
# nuauth_tls_key_passwd="passwd"

# absolute path to server certificate
# Warning: nuauth need to be restarted if value is changed
nuauth_tls_cert="/etc/nufw/certs/nuauth-cert.pem"

# absolute path to certificate authority
# Warning: nuauth need to be restarted if value is changed
nuauth_tls_cacert="/etc/nufw/certs/nuauth-cacert.pem"

# absolute path to directory of additional trusted certificate authorities
# Warning: nuauth need to be restarted if value is changed
#nuauth_tls_ca_path="/etc/nufw/ssl/certs"

# absolute filename of server certificate
# revocation list
# default none
# Warning: nuauth need to be restarted if value is changed
{% if disable_crl %}#{% endif %}nuauth_tls_crl="/etc/nufw/certs/nuauth-crl.pem"

# crl refresh interval (in seconds)
# Reads the crl file every N seconds
# to update the revocation list
# default: 30
nuauth_tls_crl_refresh=30

# Absolute path to PEM-encoded file containing DH parameters.
#
# Using ephemeral DH key exchange yields forward secrecy, as the connection can
# only be decrypted, when the DH key is known. By generating a temporary DH key
# inside the server application that is lost when the application is left, it
# becomes impossible for an attacker to decrypt past sessions, even if he gets
# hold of the normal (certified) key, as this key was only used for signing.
#
# If no file is specified, the DH parameters are generated when nuauth starts,
# which can take some time.
#
# default: none
nuauth_tls_dh_params="/etc/nufw/certs/nuauth-dh_params.pem"

# This value sets the certificate management between
# every NuFW component.
#
# do we require valid certificates from client
# and nufw server ? (verified against certificate
# authority)
# default : 2 (certificates are required)
# Warning: nuauth need to be restarted if value is changed
# NUSSL_CERT_IGNORE 0
# NUSSL_CERT_REQUEST 1
# NUSSL_CERT_REQUIRE 2
nuauth_tls_request_cert={% if strict %}2{% else %}1{% endif %}

# This allows the cipher list sent by the server to be modified.
# When the client sends a list of supported ciphers the first client
# cipher also included in the server list is used. Because the client
# specifies the preference order, the order of the server cipherlist
# irrelevant.
# See the 'openssl ciphers' command for more information (OpenSSL).
# For GnuTLS, use 'gnutls-cli --list' and 'man gnutls_priority_init'
#
# default: all
# example for OpenSSL:
#nuauth_tls_ciphers="AES:ALL:!aNULL:!eNULL:+RC4:@STRENGTH"
# example for GnuTLS:
#nuauth_tls_ciphers="NORMAL:!AES-128-CBC"


# disable warning when client certificates are not requested
# This option can be used to hide the warning telling that nuauth
# is not secure when used with nuauth_tls_request_cert <= 1.
# default: 0 (false)
# nuauth_tls_disable_request_warning=0

# disable verification of nufw certificate CN:
# nufw hostname FQDN must match the CN field of the certificate
# default: 0 (false)
nuauth_tls_disable_nufw_fqdn_check=0

# nuauth_module_certificate_check :
# performs additional checks on client certificates
# Available modules: x509_std x509_ocsp
# Default : nuauth_module_certificate_check=""
# nuauth_certificate_check_module="x509_std x509_ocsp"

############################################
# X509 certificate authentication
############################################

# This value sets the certificate management between
# clients<->nuauth.
#
# do we authorize authentication by certificate
# default to 0 (no), 1 yes, 2 mandatory
# Warning: nuauth need to be restarted if value is changed
# NUSSL_CERT_IGNORE 0
# NUSSL_CERT_REQUEST 1
# NUSSL_CERT_REQUIRE 2
nuauth_tls_auth_by_cert={{auth_by_cert}}

# nuauth_module_certificate_to_uid :
# get username from his certificate
# Default : nuauth_module_certificate_to_uid="x509_std"
# nuauth_certificate_to_uid_module="x509_std"

############################################
# X509 certificate OCSP check
############################################
# The x509_ocsp module can performs checks to an
# OCSP (Online Certificate Status Protocol)
# responder, to check the revocation status for each client
# certificate.
# Note: it is a fact that OCSP checks take time, and that it
# increases the time to establish a connection.
#
# Please note that this module is available only for the OpenSSL
# version

# Use the Authority Information Access (AIA) extension from the
# CA certificate (see RFC 2459) to extract the OCSP server URL.
# nuauth_tls_ocsp_ca_use_aia = 1

# FQDN of the OCSP responder
# nuauth_tls_ocsp_server="ocsp.domain.com"

# Port used by the OCSP responder
# nuauth_tls_ocsp_port=2560

# OCSP path for the requests:
# nuauth_tls_ocsp_path="/"

