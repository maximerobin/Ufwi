# File generated by EdenWall: {{ _generation_time_ }}
# Example configuration for ulogd
# Adapted to Debian by Achilleas Kotsis <achille@debian.gr>

[global]
######################################################################
# GLOBAL OPTIONS
######################################################################


# logfile for status messages
logfile="/var/log/ulogd.log"

# loglevel: debug(1), info(3), notice(5), error(7) or fatal(8)
loglevel=5

######################################################################
# PLUGIN OPTIONS
######################################################################

# We have to configure and load all the plugins we want to use

# general rules:
# 1. load the plugins _first_ from the global section
# 2. options for each plugin in seperate section below


plugin="/usr/lib/ulogd/ulogd_inppkt_NFLOG.so"
plugin="/usr/lib/ulogd/ulogd_inppkt_ULOG.so"
plugin="/usr/lib/ulogd/ulogd_inppkt_UNIXSOCK.so"
#plugin="/usr/lib/ulogd/ulogd_inpflow_NFCT.so"
plugin="/usr/lib/ulogd/ulogd_filter_IFINDEX.so"
plugin="/usr/lib/ulogd/ulogd_filter_IP2STR.so"
#plugin="/usr/lib/ulogd/ulogd_filter_IP2BIN.so"
plugin="/usr/lib/ulogd/ulogd_filter_PRINTPKT.so"
plugin="/usr/lib/ulogd/ulogd_filter_HWHDR.so"
plugin="/usr/lib/ulogd/ulogd_filter_PRINTFLOW.so"
#plugin="/usr/lib/ulogd/ulogd_filter_MARK.so"
#plugin="/usr/lib/ulogd/ulogd_output_LOGEMU.so"
{% if enabled %}
plugin="/usr/lib/ulogd/ulogd_output_SYSLOG.so"
{% endif %}
#plugin="/usr/lib/ulogd/ulogd_output_OPRINT.so"
#plugin="/usr/lib/ulogd/ulogd_output_NACCT.so"
#plugin="/usr/lib/ulogd/ulogd_output_PCAP.so"
plugin="/usr/lib/ulogd/ulogd_output_PGSQL.so"
#plugin="/usr/lib/ulogd/ulogd_output_MYSQL.so"
#plugin="/usr/lib/ulogd/ulogd_output_DBI.so"
plugin="/usr/lib/ulogd/ulogd_raw2packet_BASE.so"
{% if enabled and "ulogd" in components and components.ulogd.enabled %}
plugin="/usr/lib/ulogd/ulogd_filter_PRINTNUFW.so"
{% endif %}

# this is a stack for logging packet send by system via LOGEMU
#stack=log1:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,print1:PRINTPKT,emu1:LOGEMU

# this is a stack for packet-based logging via LOGEMU
#stack=log2:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,print1:PRINTPKT,emu1:LOGEMU

# this is a stack for ULOG packet-based logging via LOGEMU
#stack=ulog1:ULOG,base1:BASE,ip2str1:IP2STR,print1:PRINTPKT,emu1:LOGEMU

# this is a stack for packet-based logging via LOGEMU with filtering on MARK
#stack=log2:NFLOG,mark1:MARK,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,print1:PRINTPKT,emu1:LOGEMU

# this is a stack for flow-based logging via LOGEMU
#stack=ct1:NFCT,ip2str1:IP2STR,print1:PRINTFLOW,emu1:LOGEMU

# this is a stack for flow-based logging via OPRINT
#stack=ct1:NFCT,op1:OPRINT

# this is a stack for NFLOG packet-based logging to PCAP
#stack=log2:NFLOG,base1:BASE,pcap1:PCAP

# this is a stack for logging packet to MySQL
#stack=log2:NFLOG,base1:BASE,ifi1:IFINDEX,ip2bin1:IP2BIN,mac2str1:HWHDR,mysql1:MYSQL

# this is a stack for logging packet to PGsql after a collect via NFLOG
{% if enabled and "ulogd" in components and components.ulogd.enabled %}
# With syslog export:
stack=log_drop:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,mac2str1:HWHDR,print1:PRINTPKT,pgsql_ulog:PGSQL,sys_nufw:SYSLOG
stack=log_accept:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,mac2str1:HWHDR,print1:PRINTPKT,pgsql_ulog:PGSQL,sys_nufw:SYSLOG
stack=nuauth1:UNIXSOCK,base1:BASE,ip2str1:IP2STR,mac2str1:HWHDR,print1:PRINTPKT,nufw1:PRINTNUFW,pgsql_nuauth:PGSQL,sys_nufw:SYSLOG
stack=nudpi1:UNIXSOCK,base1:BASE,ip2str1:IP2STR,print1:PRINTPKT,pgsql_nudpi:PGSQL,sys_nufw:SYSLOG
{% else %}
# Without syslog export:
stack=log_drop:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,mac2str1:HWHDR,pgsql_ulog:PGSQL
stack=log_accept:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,mac2str1:HWHDR,pgsql_ulog:PGSQL
stack=nuauth1:UNIXSOCK,base1:BASE,ip2str1:IP2STR,mac2str1:HWHDR,pgsql_nuauth:PGSQL
stack=nudpi1:UNIXSOCK,base1:BASE,ip2str1:IP2STR,print1:PRINTPKT,pgsql_nudpi:PGSQL
{% endif %}

# this is a stack for logging packets to syslog after a collect via NFLOG
#stack=log3:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,print1:PRINTPKT,sys1:SYSLOG

# this is a stack for flow-based logging to MySQL
#stack=ct1:NFCT,ip2bin1:IP2BIN,mysql2:MYSQL

# this is a stack for flow-based logging to PGSQL
#stack=ct1:NFCT,ip2str1:IP2STR,pgsql_ct:PGSQL

# this is a stack for flow-based logging to PGSQL without local hash
#stack=ct1:NFCT,ip2str1:IP2STR,pgsql3:PGSQL

# this is a stack for flow-based logging in NACCT compatible format
#stack=ct1:NFCT,ip2str1:IP2STR,nacct1:NACCT

#stack=log1:NFLOG,base1:BASE,ifi1:IFINDEX,ip2str1:IP2STR,print1:PRINTPKT,emu1:LOGEMU

[ct1]
#netlink_socket_buffer_size=217088
#netlink_socket_buffer_maxsize=1085440

[ct2]
#netlink_socket_buffer_size=217088
#netlink_socket_buffer_maxsize=1085440
hash_enable=0

[nuauth1]
# Owner of the socket.
owner=nuauth
socket_path="/var/run/ulogd2.sock"

# Logging of system packet through NFLOG
[log1]
# netlink multicast group (the same as the iptables --nflog-group param)
# Group O is used by the kernel to log connection tracking invalid message
group=0
#netlink_socket_buffer_size=217088
#netlink_socket_buffer_maxsize=1085440
# set number of packet to queue inside kernel
#netlink_qthreshold=1
# set the delay before flushing packet in the queue inside kernel (in 10ms)
#netlink_qtimeout=100

# packet logging through NFLOG for group 1
[log_drop]
# netlink multicast group (the same as the iptables --nflog-group param)
group=1 # Group has to be different from the one use in log1
numeric_label=0
#netlink_socket_buffer_size=217088
#netlink_socket_buffer_maxsize=1085440
# If your kernel is older than 2.6.29 and if a NFLOG input plugin with
# group 0 is not used by any stack, you need to have at least one NFLOG
# input plugin with bind set to 1. If you don't do that you may not
# receive any message from the kernel.
bind=1

[log_accept]
group=2
numeric_label=1
bind=1

# packet logging through NFLOG for group 2, numeric_label is
# set to 1
[log3]
# netlink multicast group (the same as the iptables --nflog-group param)
group=2 # Group has to be different from the one use in log1/log2
numeric_label=1 # you can label the log info based on the packet verdict
#netlink_socket_buffer_size=217088
#netlink_socket_buffer_maxsize=1085440
#bind=1

[ulog1]
# netlink multicast group (the same as the iptables --ulog-nlgroup param)
nlgroup=1
#numeric_label=0 # optional argument

[emu1]
file="/var/log/ulogd_syslogemu.log"
sync=1

[op1]
file="/var/log/ulogd_oprint.log"
sync=1

[pcap1]
sync=1

[pgsql_ulog]
db="ulogd"
#host="localhost"  # Comment host so that we use a socket (faster).
user="ulogd"
table="view_insert_ulog2"
pass="egJ8BmWxW13RyDxt"
procedure="INSERT INTO ulog2"
#schema="public"

[pgsql_nuauth]
db="ulogd"
user="ulogd"
table="view_insert_nufw"
pass="egJ8BmWxW13RyDxt"
procedure="INSERT_NUFW"

[pgsql_ct]
db="ulogd"
#host="localhost"
user="ulogd"
table="ulog2_ct"
pass="egJ8BmWxW13RyDxt"
procedure="INSERT_CT"

[pgsql2]
db="nulog"
host="localhost"
user="nupik"
table="ulog2_ct"
pass="changeme"
procedure="INSERT_CT"

[pgsql3]
db="nulog"
host="localhost"
user="nupik"
table="ulog2_ct"
pass="changeme"
procedure="INSERT_OR_REPLACE_CT"

[dbi1]
db="ulog2"
dbtype="pgsql"
host="localhost"
user="ulog2"
table="ulog"
pass="ulog2"
procedure="INSERT_PACKET_FULL"

[sys2]
facility=LOG_LOCAL2

[sys_nufw]
facility=LOG_LOCAL4
level=LOG_INFO

[nacct1]
sync = 1

[mark1]
mark = 1

# NuDPI
[nudpi1]
socket_path="/var/run/nudpi-engine/ulogd2.sock"

[pgsql_nudpi]
db="ulogd"
host="localhost"
user="dpi"
table="dropped_users"
pass="R0t6U4GBYcUDz7aC"
procedure="INSERT INTO dropped_users"

