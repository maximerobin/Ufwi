[CORE]
bind_address = 127.0.0.1
bind_port = 8080

enable_ssl = yes
bind_address_ssl = 127.0.0.1
bind_port_ssl = 8443

streaming_udp_port = 8080

vardir = /var/lib/ufwi-rpcd/
sharedir = /usr/share/ufwi-rpcd/

# this is the primary system used to authenticate users
auth = file_auth

# optional auth system called after the primary system if
# login failed
# secondary_auth = ldap_auth

# duration in minutes
max_session_duration = 5
use_edenwall = False

# List of paths separated by ":" added to the PYTHONPATH (sys.path)
path = /usr/share/python-support
templatesdir = /usr/share/ufwi-rpcd/templates/

[log]
# This section describes things about logging.
# Available values: DEBUG, INFO, WARNING, ERROR, CRITICAL

# Log written to the stdout
use_stdout = False

# Log written to the stdout
stdout_level = ERROR

# Log written to the log file (ufwi-rpcd.log)
file_level = INFO

# Log comming from print instructions (stdout)
print_level = DEBUG

filename = /var/log/ufwi-rpcd.log

#[multisite]
#bind_address =
#bind_port = 54321
#server_address = 192.168.1.1
#server_port = 54321
#ssl_cert = cert.pem
#ssl_key = key.pem
#ssl_cert_chain = cert_chain.pem

[ssl]
use_nupki = no
nupki_cert =
nupki_pki =
ca = /etc/ufwi-rpcd/ca.pem
cert = /etc/ufwi-rpcd/cert.pem
key = /etc/ufwi-rpcd/key.pem
fqdn_check = no
crl =
key_passwd =

# Does a client require a valid certificate?
# If not, ignore all checks on certificates
check_clients = no

# Maximum certificate chain depth
max_depth = 5

# TLS/SSL protocol:
#  - sslv2: only understand the SSLv2 protocol
#  - sslv3: only understand the SSLv3 protocol
#  - tlsv1: only understand the TLSv1 protocol
#  - sslv23: understand the SSLv2, SSLv3, and TLSv1 protocol
#
# See OpenSSL documentation (SSL_CTX_new function) for the details.
#
# Old ufwi-rpcd clients use the Python 2.5 SSL implementation. Python uses
# SSLv23 and starts by calling SSL_connect() which sends a Client Hello instead
# of a SSL handshake. If the server uses TLSv1, it closes directly the TCP
# socket (invalid TLS/SSL protocol number). If the client uses M2Crypto with
# SSLv23, it works because M2Crypto starts with an handshake.
#
# Set the default protocol to SSLv23 to keep backward compatibility with these
# clients. New clients only use M2Crypto with TLSv1 which is supported if the
# server uses M2Crypto or PyOpenSSL with SSLv23 or TLSv1.
protocol = sslv23

# Cipher list:
#  - start with ALL (all ciphers suites except the eNULL ciphers)
#  - block ADH: anonymous DH cipher suites
#  - block LOW: "low" encryption cipher suites, 64 or 56 bit encryption algorithms
#  - block EXP: export encryption algorithms, including 40 and 56 bits algorithms
#  - block MD5: cipher suites using MD5
#  - @STRENGTH: sort the cipher list in order of encryption algorithm key length.
#
# See ciphers man page for more information.
cipher_list = ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH

[file_auth]
type = file
authfile = /var/lib/ufwi-rpcd/users
groupfile = /var/lib/ufwi-rpcd/groups

[ldap_auth]
type = ldap
uri = ldaps://ldap.domain.com
basedn = dc=domain,dc=com
login = uid
additional_filter = objectclass=*
group_attribute = memberuid

[radius_auth]
type = radius
hostname = localhost
secret = pupuce

[modules]
# unless absolute, the directory is relative to $vardir
dir = mods-enabled

[audit]
#For sqlite paths, prefix your path with //// to specify an absolute path
db_url = sqlite:////var/lib/ufwi-rpcd/audit.db
db_create_tables = True

