"""
Copyright (C) 2009-2011 EdenWall Technologies

This file is part of NuFirewall. 
 
 NuFirewall is free software: you can redistribute it and/or modify 
 it under the terms of the GNU General Public License as published by 
 the Free Software Foundation, version 3 of the License. 
 
 NuFirewall is distributed in the hope that it will be useful, 
 but WITHOUT ANY WARRANTY; without even the implied warranty of 
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 GNU General Public License for more details. 
 
 You should have received a copy of the GNU General Public License 
 along with NuFirewall.  If not, see <http://www.gnu.org/licenses/>
"""

from PyQt4.QtCore import SIGNAL
from PyQt4.QtGui import QDialog

from ufwi_rpcd.common import tr
from ufwi_rulesetqt.custom_rules_ui import Ui_Dialog
from ufwi_ruleset.common.network import IPTABLES_TABLES

DEFAULT_STR = """\
# Custom %s iptables rules for the table '%s'
# Those rules will be inserted %s the rules generated by ufwi_ruleset.
# The format used is iptables-save format.
# For example:
# -A INPUT -p tcp -m tcp --sport 1024:65535 --dport 80 -m state --state NEW -j ACCEPT
"""

class CustomRulesDialog(Ui_Dialog):
    def __init__(self, window):
        Ui_Dialog.__init__(self)
        self.window = window
        self.dialog = QDialog(window)
        self.setupUi(self.dialog)
        self.rules = self.window.ruleset('getCustomRules')

        self.ipv_combo.clear()
        for ipv in IPTABLES_TABLES.keys():
            # Fill IPVersion the combo box:
            self.ipv_combo.addItem(ipv)

            # set default string if necessary:
            for table in IPTABLES_TABLES[ipv]:
                if self.rules[ipv][table + '-pre'] == "":
                    self.rules[ipv][table + '-pre'] = DEFAULT_STR % (ipv, table, tr('before'))
                if self.rules[ipv][table + '-post'] == "":
                    self.rules[ipv][table + '-post'] = DEFAULT_STR % (ipv, table, tr('after'))

        self.refreshTableCombo()
        self.refreshFrameText()

        self.previous_ipv, self.previous_table = self.currentIndex()

        self.ipv_combo.connect(self.ipv_combo, SIGNAL("currentIndexChanged (int)"), self.onIPVClick)
        self.table_combo.connect(self.table_combo, SIGNAL("currentIndexChanged (int)"), self.onTableClick)
        self.position_combo.connect(self.position_combo, SIGNAL("currentIndexChanged (int)"), self.onTableClick)

        if self.dialog.exec_():
            self.saveRules()

    def currentTable(self):
        pos = self.position_combo.currentIndex()
        if pos:
            pos = '-pre'
        else:
            pos = '-post'
        table = unicode(self.table_combo.currentText() + pos)
        return table

    def currentIPVersion(self):
        return unicode(self.ipv_combo.currentText())

    def currentIndex(self):
        return (self.currentIPVersion(), self.currentTable())

    def refreshTableCombo(self):
        self.table_combo.clear()
        for table in IPTABLES_TABLES[self.currentIPVersion()]:
            self.table_combo.addItem(table)

        # No need to refresh the text as it'll be triggered by the modification
        # of the table_combo
        #self.refreshFrameText()

    def refreshFrameText(self):
        ipv, table = self.currentIndex()
        self.rules_text.setPlainText(self.rules[ipv][table])

    def saveFrameText(self):
        rules = unicode(self.rules_text.toPlainText())
        self.rules[self.previous_ipv][self.previous_table] = rules

    def saveRules(self):
        self.saveFrameText()

        # First remove occurence that only contains the default conf
        for ipv in IPTABLES_TABLES.keys():
            for table in IPTABLES_TABLES[ipv]:
                rules = self.rules[ipv][table + '-pre']
                if rules == tr(DEFAULT_STR) % (ipv, table, tr('before')):
                    self.rules[ipv][table + '-pre'] = u''
                rules = self.rules[ipv][table + '-post']
                if rules == tr(DEFAULT_STR) % (ipv, table, tr('after')):
                    self.rules[ipv][table + '-post'] = u''

        # Save the rules
        self.window.ruleset('setCustomRules', self.rules)
        self.window.refreshUndo()

    def onIPVClick(self, index = None):
        self.saveFrameText()
        self.refreshTableCombo()
        self.previous_ipv, self.previous_table = self.currentIndex()

    def onTableClick(self, index = None):
        if index == -1:
            return
        self.saveFrameText()
        self.refreshFrameText()
        self.previous_ipv, self.previous_table = self.currentIndex()
